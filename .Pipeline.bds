#!/usr/bin/env bds

#-------------------------------------------------------------------
#set up default values for all incomig flags
#are automatically overwritten by supplied values
#-------------------------------------------------------------------

string e = "Not_A_Dir"   #experimental directory variable 
int n    =  1            #default number of cores per task
int f   =  0       #did the user supply flags?



#-------------------------------------------------------------------
#save all your usefull paths to prevent grief later
#-------------------------------------------------------------------

#Top Level
experiment     := e + '/'
pipe_modules   := ppwd + '/.Pipe_Modules'
default_config := ppwd + '/.Defaults.config'

#Input Folders
user_config   := experiment + 'User.config'     #User flag location
inputs        := experiment + 'Raw_Inputs/'

#Output folders, we'll make these on the fly later
intermediates := experiment + 'Intermediates/'
outputs       := experiment + 'Outputs/'


#-------------------------------------------------------------------
#read the configs
#i handle all the settings as strings, one string per pipe module
#-------------------------------------------------------------------

#read defaults
string{} flag_maps = config( default_config )

#read user flags
if ( f == 1) { flag_maps = config( user_config, flag_maps )}

#parse the map to get the flags
string Foo_flags   = flag_maps{ 'Foo_append' }
string Bar_flags   = flag_maps{ 'Bar_append' }
string Merge_flags = flag_maps{ 'Foobar_order' }

#-------------------------------------------------------------------
#Get a list of all the input samples and parallelize string flipping across them
#-------------------------------------------------------------------

string[] input_samples = inputs.dir() #list of sample names (not paths)
par{
    for( string sample : input_samples ){
    
        #---------------------------------------------------------------
        #Handle the paths for this sample
        #---------------------------------------------------------------
        
        #build the path
        sample_path := inputs + sample + '/'
        
        #get the paths to the data files based on a glob
        foo_file := sample_path.dirPath('*.foo').join()
        bar_file := sample_path.dirPath('*.bar').join()
        
        #set up the intermediate dirs for the files
        inter_dest := intermediates + sample + '/'
        inter_foo  := inter_dest + '/' + sample + '.foo'
        inter_bar  := inter_dest + '/' + sample + '.bar'
        
        #make the dir
        if ( !inter_dest.isDir() ) { inter_dest.mkdir() }
        
        #---------------------------------------------------------------
        #Run the tasks
        #---------------------------------------------------------------

        #info for the task
        task_foo := 'Flipping Foo: ' + sample
        task_bar := 'Flipping Bar: ' + sample
        
        
        #Task for flipping foos 
        string Foo_tid = task( taskName := task_foo, inter_foo <- foo_file, cpus := n){
        
            #Run the module        
            sys python3 $pipe_modules/foo_flip.py -i $foo_file -o $inter_foo -f $Foo_flags -n $n
        }
        
        #Task for flipping bars
        string Bar_tid = task( taskName := task_bar, inter_bar <- bar_file, cpus := n){
        
            #Run the module
            sys Rscript $pipe_modules/bar_flip.R -i $bar_file -o $inter_bar -f $Bar_flags -n $n
        }
    }
}

#Let all tasks finish
wait

#-------------------------------------------------------------------
#list of all the intermediately processed samples and parallelize
#-------------------------------------------------------------------
string[] inter_samples = intermediates.dir()
par{
    for( string sample : inter_samples ){
        #---------------------------------------------------------------
        #Handle the paths for this sample
        #---------------------------------------------------------------
        
        #build the path
        sample_path := intermediates + '/' + sample + '/'
        
        #get the paths to the data files based on a glob
        foo_file := sample_path.dirPath('*.foo').join()
        bar_file := sample_path.dirPath('*.bar').join()
        string[]both_files = [foo_file, bar_file]
        
        #set up the output dirs for the files
        out_dest   := outputs + sample
        out_foobar := out_dest + '/' + sample + '.foobar'
        
        #make the dir
        if ( !out_dest.isDir() ) { out_dest.mkdir() }
        
        #---------------------------------------------------------------
        #Run the task
        #---------------------------------------------------------------
        
        #info for the task
        task_foobar := 'Assmebling Foobar: ' + sample
        
        #Task for assembling foobars
        string Foobar_tid = task(taskName := task_foobar, out_foobar <- both_files, cpus := n){
        
            #Run the module
            sys $pipe_modules/foobar_merge.sh -i $foo_file -b $bar_file -o $out_foobar -f $Merge_flags -n $n   
        }
    }
}

#Let finish
wait


#-------------------------------------------------------------------
#list of all the files which need aggregation, parallelize across them
#-------------------------------------------------------------------

#setup the outputs
#Has to be done outside the loop since we are aggreagting ALL samples
agg_file := experiment + 'Final.csv'

string[] outer_samples = outputs.dir()
par{
    for( string sample : outer_samples ){
        
        #---------------------------------------------------------------
        #Handle the paths for this sample
        #---------------------------------------------------------------

        #build the path
        sample_path := outputs + sample
        
        #get the paths to the data files based on a glob
        foobar_file := sample_path.dirPath('*.foobar').join()
        
        #---------------------------------------------------------------
        #Run the task
        #---------------------------------------------------------------
        
        #info for the task
        task_agg := 'Aggregating Foobar: ' + sample

        #setup the checkfile. 
        #can't use the output file for <- b/c each input lacks a unique output
        agg_chk := sample_path + '/agg.chk'
        
        string Aggregate_tip = task(taskName := task_agg, agg_chk <- foobar_file, cpus := n){
            
            sys date >> $agg_chk
            sys python3 $pipe_modules/aggregate.py -s $sample -i $foobar_file -o $agg_file -n $n
                
            
        }
    }
}

